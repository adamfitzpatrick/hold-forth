id: '1'
date: 5/1/2017
title: Levenshtein Distance Searching
synopsis: >
  Calculating the levenshtein distance between two strings provides one way to implement a fault-tolerant search
  algorithm which may be implemented on the client side without excessive computational cost.
content:
- >
  <p class="blog-post-detail__para blog-post-detail__para--lead">
    Calculating the levenshtein distance between two strings provides one way to implement a fault-tolerant search
    algorithm which may be implemented on the client side without excessive computational cost.
  </p>
  <p class="blog-post-detail__para">
    The Levenshtein Distance between two strings is simply the number of single-character edits required to transform
    one string into the other.
  </p>
  <ul class="blog-post-detail__key-values">
    <li class="blog-post-detail__key-value">
        <span class="blog-post-detail__key">insertion</span>
        The distance between <em>a</em> and <em>an</em> is 1
    </li>
    <li class="blog-post-detail__key-value">
        <span class="blog-post-detail__key">deletion</span>
        The distance between <em>and</em> and <em>an</em> is 1
    </li>
    <li class="blog-post-detail__key-value">
        <span class="blog-post-detail__key">substitution</span>
        The distance between <em>mitten</em> and <em>kitten</em> is 1
    </li>
  </ul>
  <p class="blog-post-detail__para">
    It’s obvious why I’d want to do this. As previously stated, my design skills could be better. As it turns out, many
    of my initial ideas are inadequate. Things I think will work just don’t feel right. What I thought would make sense
    is actually confusing. But I’d never know that by staring at my Sketch file.
  </p>
  <p class="blog-post-detail__para">
    Having that instant feedback cycle of that didn’t work. What about this? Nope, This? Almost. This? Yes, that’s it!
    is so valuable to the design process. So you could sit and wait for somebody else to build it for you. You can tell
    them to redo it a few times until you get it just right. Or (while you’re waiting) you could just learn to do it
    yourself.
  </p>
  <blockquote class="blog-post-detail__blockquote">
    Fault-tolerant searching can dramatically improve the user experience.
  </blockquote>
  <p class="blog-post-detail__para">
    <strong>Bullshit</strong>. People do it every day. Designing software requires a knowledge of workflows, a
    systematic approach to simplifying the complex, and a deep understanding of the interface paradigms that software
    provides us. Coding is the same thing. You may never reach the skill level of that engineer or designer you have on
    a pedestal, but that’s not the point. The point is making great software, and knowing how to design and code will
    help you do that better. It just will.
  </p>
  <p class="blog-post-detail__para">
    I learned visual design over years. I’m still learning it. I’m no artist. But trial and error goes a long way, and
    eventually got the hang of it. It’s not impossible. Learning Ruby for a designer can be just as uncomfortable as
    learning how to balance typography for a developer. Get uncomfortable. Get better.
  </p>
- >
  <h2>Implementation</h2>
  <p class="blog-post-detail__para">
    "Server-less" is a coined term that refers to building web apps without bothering about how the server is set up.
    The term causes confusion to developers that are new to the concept. It doesn't mean that your app won't live on a
    server, rather it means that the sever setup and management is left out to be managed by the provisioning platform.
  </p>
  <p class="blog-post-detail__para">
    One other thing you might hear when "server-less" is discussed is Function as a Service (FaaS). Serverless technique
    is simplified by functions. As a developer, you end up writing and deploying compassable functions. This concept
    will become clearer when we start getting our hands dirty.
  </p>
- >
  <pre class="blog-post-detail__code syntax-highlightable typescript">
    <pre class="syntax-highlightable__header">big-important.service.ts</pre>
    <code>
      import { Component, OnInit, AfterViewInit } from "@angular/core";
      import { BlogPostService } from "../../services/blog-post/blog-post.service";
      import { Post } from "../../models/post/post.model";
      import { SyntaxHighlightService } from "../../services/syntax-highlight/syntax-highlight.service";
    </code><code>
      @Component({
        selector: "blog-post-detail",
        template: require("./blog-post-detail.html"),
        styles: [ require("./blog-post-detail.scss" ) ]
      })
      export class BlogPostDetail implements OnInit, AfterViewInit {
        post: Post;
    </code><code>
        constructor(
          private blogPostService: BlogPostService,
          private syntaxHighlightService: SyntaxHighlightService
        ) {}
    </code><code>
        ngOnInit(): void {
          this.post = this.blogPostService.get("1");
        }
    </code><code>
        ngAfterViewInit(): void {
          this.syntaxHighlightService.highlight();
        }
      }
    </code>
  </pre>
- >
  <h2>Webtask Something Or Other</h2>
  <img class="blog-post-detail__img" src="./images/demo-pic.png">
  <p class="blog-post-detail__para">
    Webtask integrates best JavaScript. As you have seen, we just exported a function and an app was created. You might
    be wondering how you could bring in a different programming model to the scene.
  </p>
  <p class="blog-post-detail__para">
    Exporting functions is just one of the programming models supported by Webtask. It happens to be the most basic but
    that not withstanding, you can employ what works for you. In our case we want to use Express.
  </p>
  <p class="blog-post-detail__para">
    Webtask has a utility tool, webtask-tools, to help you bind your express app to a Webtask context. Therefore, rather
    than exporting a simple function, you can export an express app bound to Webtask using webtask-tools:
  </p>
tags:
- Angular
- Angular 4
- ES7